{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useNavigation } from '@react-navigation/native';\nimport { AntDesign } from '@expo/vector-icons';\nimport { render } from 'react-dom';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\n\nfunction EditScreen(_ref) {\n  var navigation = _ref.navigation;\n  console.log(route.params);\n  date = route.params[0];\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Edit Screen.\"\n    }), _jsx(Button, {\n      onPress: function onPress() {\n        return navigation.navigate(\"EditScreen\", {\n          date: date\n        });\n      },\n      title: \"Confirm\"\n    })]\n  });\n}\n\nfunction DateScreen(_ref2) {\n  var navigation = _ref2.navigation,\n      route = _ref2.route;\n  console.log(route.params);\n  date = new Date();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Today is the \" + date.getDate() + \" of \" + date.getMonth() + \".\"\n    }), _jsx(Button, {\n      onPress: function onPress() {\n        return navigation.navigate(\"EditScreen\", {\n          date: date\n        });\n      },\n      title: \"Edit Tasks\"\n    })]\n  });\n}\n\nfunction CalendarHome(_ref3) {\n  var navigation = _ref3.navigation;\n  var Navigation = useNavigation();\n  var d = new Date();\n\n  var _useState = useState(d.getMonth()),\n      _useState2 = _slicedToArray(_useState, 2),\n      month = _useState2[0],\n      setMonth = _useState2[1];\n\n  var dates = function dates(month) {\n    var d = new Date(new Date().getFullYear(), month, 1);\n    var today = new Date();\n    var firstDay = d.getDay() - 6;\n    var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    var renderedDates = [[_jsx(View, {\n      style: styles.row,\n      children: days.map(function (day) {\n        return _jsx(View, {\n          style: styles.button,\n          children: _jsx(Text, {\n            children: day\n          })\n        });\n      })\n    })]];\n    var temp;\n\n    for (var row = 0; row < 6; row++) {\n      temp = [];\n\n      var _loop = function _loop(column) {\n        var day = firstDay + column + 7 * row;\n        var date = new Date(d.getFullYear(), d.getMonth(), day);\n        temp.push(_jsx(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            return navigation.navigate(\"DateScreen\", {\n              date: date\n            });\n          },\n          children: _jsx(Text, {\n            style: date.getDate() === today.getDate() && date.getMonth() === today.getMonth() ? {\n              color: \"red\"\n            } : date.getMonth() === today.getMonth() ? {\n              color: \"black\"\n            } : {\n              color: \"gray\"\n            },\n            children: date.getDate()\n          })\n        }));\n      };\n\n      for (var column = 0; column < 7; column++) {\n        _loop(column);\n      }\n\n      renderedDates.push(_jsx(View, {\n        style: styles.row,\n        children: temp\n      }));\n    }\n\n    return renderedDates;\n  };\n\n  console.log(dates);\n  var tempMonthobj = new Date(d.getFullYear(), month);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return setMonth(month - 1);\n        },\n        children: _jsx(AntDesign, {\n          name: \"left\",\n          size: 24,\n          color: \"black\"\n        })\n      }), _jsxs(Text, {\n        children: [[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"][tempMonthobj.getMonth()], \" \", tempMonthobj.getFullYear()]\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return setMonth(month + 1);\n        },\n        children: _jsx(AntDesign, {\n          name: \"right\",\n          size: 24,\n          color: \"black\"\n        })\n      })]\n    }), dates(month)]\n  });\n}\n\nexport default function CalendarStack() {\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"CalendarHome\",\n      component: CalendarHome,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"DateScreen\",\n      component: DateScreen\n    }), _jsx(Stack.Screen, {\n      name: \"EditScreen\",\n      component: EditScreen\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  header: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  container: {\n    alignSelf: \"center\",\n    flex: 1,\n    maxHeight: \"40%\",\n    padding: 10\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  button: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flex: 1,\n    padding: 15,\n    borderColor: 'light-grey',\n    borderWidth: 1,\n    aspectRatio: 1\n  }\n});","map":{"version":3,"names":["React","useState","createStackNavigator","useNavigation","AntDesign","render","Stack","EditScreen","navigation","console","log","route","params","date","navigate","DateScreen","Date","styles","container","getDate","getMonth","CalendarHome","Navigation","d","month","setMonth","dates","getFullYear","today","firstDay","getDay","days","renderedDates","row","map","day","button","temp","column","push","color","tempMonthobj","header","CalendarStack","headerShown","StyleSheet","create","flexDirection","justifyContent","alignSelf","flex","maxHeight","padding","alignItems","borderColor","borderWidth","aspectRatio"],"sources":["D:/1.xingxing data/Google Drive/Coding/React Native/Brainhack app/components/calendar.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { Text, View, FlatList, TouchableOpacity, StyleSheet} from 'react-native';\r\nimport {createStackNavigator} from '@react-navigation/stack'\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { AntDesign } from '@expo/vector-icons'; \r\nimport { render } from 'react-dom';\r\n\r\n//import * as SQLite from \"expo-sqlite\";\r\n/*\r\nfunction openDatabase() {\r\n  if (Platform.OS === \"web\") {\r\n    return {\r\n      transaction: () => {\r\n        return {\r\n          executeSql: () => {},\r\n        };\r\n      },\r\n    };\r\n  }\r\n  const db = SQLite.openDatabase(\"db.db\");\r\n  return db;\r\n}\r\nconst db = openDatabase();\r\n*/\r\nconst Stack = createStackNavigator()\r\n\r\nfunction EditScreen({navigation}){\r\n    console.log(route.params)\r\n    date = route.params[0]\r\n    return (\r\n        <View>\r\n            <Text>Edit Screen.</Text>\r\n            <Button onPress={()=>navigation.navigate(\"EditScreen\",{date})} title=\"Confirm\"/>\r\n        </View>\r\n    )\r\n}\r\n\r\nfunction DateScreen({navigation, route}){ //shows tasks\r\n    console.log(route.params)\r\n    //date = route.params[0]\r\n    date = new Date()\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text>{`Today is the ${date.getDate()} of ${date.getMonth()}.`}</Text>\r\n            <Button onPress={()=>navigation.navigate(\"EditScreen\",{date})} title=\"Edit Tasks\"/>\r\n        </View>        \r\n    )\r\n}\r\n\r\nfunction CalendarHome({navigation}){\r\n    const Navigation = useNavigation()\r\n    let d = new Date();\r\n    const [month,setMonth] = useState(d.getMonth()); //only changing month, js automatically changes the year if month <0 or >11.\r\n    //making the buttons and dates\r\n    const dates = (month)=>{\r\n        let d = new Date((new Date).getFullYear(),month,1)\r\n        let today = new Date()\r\n        let firstDay = d.getDay() - 6 //show one week before\r\n        //defining header\r\n        let days = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n        let renderedDates = [\r\n            [<View style={styles.row}>\r\n                {days.map((day)=>\r\n                <View style={styles.button}>\r\n                    <Text>{day}</Text>\r\n                </View>)}\r\n            </View>]\r\n        ];\r\n        let temp;\r\n        for (let row=0; row<6; row++){ //adding date\r\n            temp = []\r\n            for (let column=0; column<7; column++){\r\n                let day = firstDay+column+7*row\r\n                let date = new Date(d.getFullYear(),d.getMonth(),day)\r\n                temp.push(<TouchableOpacity \r\n                style={styles.button} onPress={()=>navigation.navigate(\"DateScreen\",{date})}>\r\n                    <Text style={date.getDate()===today.getDate() && date.getMonth()===today.getMonth() ? {color:\"red\"} //same day\r\n                    : date.getMonth()===today.getMonth() ? {color:\"black\"} //same month\r\n                    : {color:\"gray\"}//diff month\r\n                    }>\r\n                        {date.getDate()}\r\n                    </Text>\r\n                </TouchableOpacity>)\r\n            }\r\n            renderedDates.push(<View style={styles.row}>{temp}</View>)\r\n        }\r\n        return renderedDates\r\n    }\r\n    console.log(dates)\r\n    let tempMonthobj = new Date(d.getFullYear(),month) //to wrap the year around if there is a month that is not within 0-11.\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.header}>\r\n                <TouchableOpacity onPress={()=>setMonth(month-1)}><AntDesign name=\"left\" size={24} color=\"black\"/></TouchableOpacity>\r\n                <Text>{[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"][tempMonthobj.getMonth()]} {tempMonthobj.getFullYear()}</Text>\r\n                <TouchableOpacity onPress={()=>setMonth(month+1)}><AntDesign name=\"right\" size={24} color=\"black\"/></TouchableOpacity>\r\n            </View>\r\n            {dates(month)}\r\n        </View>\r\n    )\r\n}\r\nexport default function CalendarStack(){\r\n    return (\r\n        <Stack.Navigator>\r\n            <Stack.Screen name=\"CalendarHome\" component={CalendarHome} options={{headerShown:false}}/>\r\n            <Stack.Screen name=\"DateScreen\" component={DateScreen}/>\r\n            <Stack.Screen name=\"EditScreen\" component={EditScreen}/>\r\n        </Stack.Navigator>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    header :{\r\n        flexDirection:\"row\",\r\n        justifyContent:\"space-between\",\r\n    },\r\n    container: {\r\n        alignSelf:\"center\",\r\n        flex:1,\r\n        maxHeight:\"40%\",\r\n        padding:10,\r\n        \r\n    },\r\n    row: {\r\n        flexDirection:'row',\r\n        justifyContent:'space-between',\r\n    },\r\n    button: {\r\n        alignItems:\"center\",\r\n        justifyContent:\"center\",\r\n        flex:1,\r\n        padding:15,\r\n        borderColor:'light-grey',\r\n        borderWidth:1,\r\n        aspectRatio:1,\r\n    },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}