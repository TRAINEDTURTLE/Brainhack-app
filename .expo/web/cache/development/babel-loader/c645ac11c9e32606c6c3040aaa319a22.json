{"ast":null,"code":"import React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useAnimatedGestureHandler } from 'react-native-reanimated';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\n\nfunction EditScreen(_ref) {\n  var navigation = _ref.navigation;\n  console.log(route.params);\n  date = route.params[0];\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Edit Screen.\"\n    }), _jsx(Button, {\n      onPress: function onPress() {\n        return navigation.navigate(\"EditScreen\", {\n          date: date\n        });\n      },\n      title: \"Confirm\"\n    })]\n  });\n}\n\nfunction DateScreen(_ref2) {\n  var navigation = _ref2.navigation;\n  console.log(route.params);\n  date = route.params[0];\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Today is the \" + date.getDate() + \" of \" + date.getMonth() + \".\"\n    }), _jsx(Button, {\n      onPress: function onPress() {\n        return navigation.navigate(\"EditScreen\", {\n          date: date\n        });\n      },\n      title: \"Edit Tasks\"\n    })]\n  });\n}\n\nfunction CalendarHome(_ref3) {\n  var navigation = _ref3.navigation;\n  var Navigation = useNavigation();\n  var d = new Date();\n  var firstDay = new Date(d.getFullYear(), d.getMonth(), 1);\n  firstDay = firstDay.getDay();\n  var days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  var dates = [[_jsx(View, {\n    style: styles.row,\n    children: days.map(function (day) {\n      return _jsx(View, {\n        style: styles.button,\n        children: _jsx(Text, {\n          children: day\n        })\n      });\n    })\n  })]];\n  console.log(dates);\n  var temp;\n\n  if (firstDay !== 0) {\n    firstDay = firstDay - 6;\n  }\n\n  for (var row = 0; row < 6; row++) {\n    temp = [];\n\n    var _loop = function _loop(column) {\n      var day = firstDay + column + 7 * row;\n      var date = new Date(d.getFullYear(), d.getMonth(), day);\n      temp.push(_jsx(TouchableOpacity, {\n        style: styles.button,\n        onPress: function onPress() {\n          return navigation.navigate(\"DateScreen\", {\n            date: date\n          });\n        },\n        children: _jsx(Text, {\n          children: date.getDate()\n        })\n      }));\n    };\n\n    for (var column = 0; column < 7; column++) {\n      _loop(column);\n    }\n\n    dates.push(_jsx(View, {\n      style: styles.row,\n      children: temp\n    }));\n  }\n\n  return _jsx(View, {\n    style: styles.container,\n    children: dates\n  });\n}\n\nexport default function CalendarStack() {\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"CalendarHome\",\n      component: CalendarHome,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"DateScreen\",\n      component: DateScreen\n    }), _jsx(Stack.Screen, {\n      name: \"EditScreen\",\n      component: EditScreen\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: \"center\",\n    flex: 1,\n    width: \"95%\",\n    marginTop: 0,\n    position: \"relative\"\n  },\n  row: {\n    width: \"100%\",\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  button: {\n    alignItems: \"center\",\n    flex: 1,\n    padding: 20,\n    borderColor: 'light-grey',\n    borderWidth: 2\n  }\n});","map":{"version":3,"names":["React","createStackNavigator","useAnimatedGestureHandler","useNavigation","Stack","EditScreen","navigation","console","log","route","params","date","navigate","DateScreen","styles","container","getDate","getMonth","CalendarHome","Navigation","d","Date","firstDay","getFullYear","getDay","days","dates","row","map","day","button","temp","column","push","CalendarStack","headerShown","StyleSheet","create","alignSelf","flex","width","marginTop","position","flexDirection","justifyContent","alignItems","padding","borderColor","borderWidth"],"sources":["D:/1.xingxing data/Google Drive/Coding/React Native/Brainhack app/components/calendar.js"],"sourcesContent":["import React from 'react';\r\nimport { Text, View, FlatList, TouchableOpacity, StyleSheet} from 'react-native';\r\nimport {createStackNavigator} from '@react-navigation/stack'\r\nimport { useAnimatedGestureHandler } from 'react-native-reanimated';\r\nimport { useNavigation } from '@react-navigation/native';\r\n//import * as SQLite from \"expo-sqlite\";\r\n/*\r\nfunction openDatabase() {\r\n  if (Platform.OS === \"web\") {\r\n    return {\r\n      transaction: () => {\r\n        return {\r\n          executeSql: () => {},\r\n        };\r\n      },\r\n    };\r\n  }\r\n  const db = SQLite.openDatabase(\"db.db\");\r\n  return db;\r\n}\r\nconst db = openDatabase();\r\n*/\r\nconst Stack = createStackNavigator()\r\n\r\nfunction EditScreen({navigation}){\r\n    console.log(route.params)\r\n    date = route.params[0]\r\n    return (\r\n        <View>\r\n            <Text>Edit Screen.</Text>\r\n            <Button onPress={()=>navigation.navigate(\"EditScreen\",{date})} title=\"Confirm\"/>\r\n        </View>\r\n    )\r\n}\r\n\r\nfunction DateScreen({navigation}){ //shows tasks\r\n    console.log(route.params)\r\n    date = route.params[0]\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text>{`Today is the ${date.getDate()} of ${date.getMonth()}.`}</Text>\r\n            <Button onPress={()=>navigation.navigate(\"EditScreen\",{date})} title=\"Edit Tasks\"/>\r\n        </View>        \r\n    )\r\n}\r\n\r\nfunction CalendarHome({navigation}){\r\n    const Navigation = useNavigation()\r\n    let d = new Date()\r\n    let firstDay = new Date(d.getFullYear(),d.getMonth(),1)\r\n    firstDay = firstDay.getDay()\r\n    //defining headers\r\n    let days = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    let dates = [\r\n        [<View style={styles.row}>\r\n            {days.map((day)=>\r\n            <View style={styles.button}>\r\n                <Text>{day}</Text>\r\n            </View>)}\r\n        </View>]\r\n    ];\r\n    console.log(dates)\r\n    let temp;\r\n    if (firstDay!==0){\r\n        firstDay = firstDay-6\r\n    }\r\n    for (let row=0; row<6; row++){ //adding date\r\n        temp = []\r\n        for (let column=0; column<7; column++){\r\n            let day = firstDay+column+7*row\r\n            let date = new Date(d.getFullYear(),d.getMonth(),day)\r\n            temp.push(<TouchableOpacity \r\n            style={styles.button} onPress={()=>navigation.navigate(\"DateScreen\",{date})}>\r\n                <Text>{date.getDate()}</Text>\r\n            </TouchableOpacity>)\r\n        }\r\n        dates.push(<View style={styles.row}>{temp}</View>)\r\n    }\r\n    return (\r\n        <View style={styles.container}>\r\n            {dates}\r\n        </View>\r\n    )\r\n}\r\nexport default function CalendarStack(){\r\n    return (\r\n        <Stack.Navigator>\r\n            <Stack.Screen name=\"CalendarHome\" component={CalendarHome} options={{headerShown:false}}/>\r\n            <Stack.Screen name=\"DateScreen\" component={DateScreen}/>\r\n            <Stack.Screen name=\"EditScreen\" component={EditScreen}/>\r\n        </Stack.Navigator>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        alignSelf:\"center\",\r\n        flex:1,\r\n        width:\"95%\",\r\n        marginTop:0,\r\n        position:\"relative\",\r\n        \r\n    },\r\n    row: {\r\n        width:\"100%\",\r\n        flexDirection:'row',\r\n        justifyContent:'space-between',\r\n    },\r\n    button: {\r\n        alignItems:\"center\",\r\n        flex:1,\r\n        padding:20,\r\n        borderColor:'light-grey',\r\n        borderWidth:2,\r\n    },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}