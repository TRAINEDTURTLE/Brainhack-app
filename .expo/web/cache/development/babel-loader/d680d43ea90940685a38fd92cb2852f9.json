{"ast":null,"code":"import React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useAnimatedGestureHandler } from 'react-native-reanimated';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\n\nfunction EditScreen(_ref) {\n  var navigation = _ref.navigation;\n  console.log(route.params);\n  date = route.params[0];\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Edit Screen.\"\n    }), _jsx(Button, {\n      onPress: function onPress() {\n        return navigation.navigate(\"EditScreen\", {\n          date: date\n        });\n      },\n      title: \"Confirm\"\n    })]\n  });\n}\n\nfunction DateScreen(_ref2) {\n  var navigation = _ref2.navigation;\n  console.log(route.params);\n  date = route.params[0];\n  return _jsxs(View, {\n    stlye: styles.container,\n    children: [_jsx(Text, {\n      children: \"Today is the \" + date.getDate() + \" of \" + date.getMonth() + \".\"\n    }), _jsx(Button, {\n      onPress: function onPress() {\n        return navigation.navigate(\"EditScreen\", {\n          date: date\n        });\n      },\n      title: \"Edit Tasks\"\n    })]\n  });\n}\n\nfunction renderCalendar() {}\n\nfunction CalendarHome() {\n  var Navigation = useNavigation();\n  var d = new Date();\n  var firstDay = new Date(d.getFullYear(), d.getMonth(), 1);\n  firstDay = firstDay.getDay();\n  var dates = [];\n\n  if (firstDay !== 0) {\n    firstDay = firstDay - 6;\n  }\n\n  for (var row = 0; row < 6; row++) {\n    for (var column = 0; column < 7; column++) {\n      var _temp = [];\n\n      _temp.push(new Date(d.getFullYear(), d.getMonth, firstDay + column + 6 * row));\n    }\n\n    dates.push[temp];\n  }\n\n  return _jsx(View, {\n    style: styles.container,\n    children: dates\n  });\n}\n\nexport default function CalendarStack() {\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"CalenderHome\",\n      component: CalendarHome\n    }), _jsx(Stack.Screen, {\n      name: \"DateScreen\",\n      component: DateScreen\n    }), _jsx(Stack.Screen, {\n      name: \"EditScreen\",\n      component: EditScreen\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  row: {\n    flex: 1,\n    padding: 10\n  },\n  column: {\n    flex: 1,\n    padding: 5\n  }\n});","map":{"version":3,"names":["React","createStackNavigator","useAnimatedGestureHandler","useNavigation","Stack","EditScreen","navigation","console","log","route","params","date","navigate","DateScreen","styles","container","getDate","getMonth","renderCalendar","CalendarHome","Navigation","d","Date","firstDay","getFullYear","getDay","dates","row","column","temp","push","CalendarStack","StyleSheet","create","justifyContent","alignItems","flex","padding"],"sources":["D:/1.xingxing data/Google Drive/Coding/React Native/Brainhack app/components/calendar.js"],"sourcesContent":["import React from 'react';\r\nimport { Text, View, FlatList, Button, StyleSheet} from 'react-native';\r\nimport {createStackNavigator} from '@react-navigation/stack'\r\nimport { useAnimatedGestureHandler } from 'react-native-reanimated';\r\nimport { useNavigation } from '@react-navigation/native';\r\n//import * as SQLite from \"expo-sqlite\";\r\n/*\r\nfunction openDatabase() {\r\n  if (Platform.OS === \"web\") {\r\n    return {\r\n      transaction: () => {\r\n        return {\r\n          executeSql: () => {},\r\n        };\r\n      },\r\n    };\r\n  }\r\n  const db = SQLite.openDatabase(\"db.db\");\r\n  return db;\r\n}\r\nconst db = openDatabase();\r\n*/\r\nconst Stack = createStackNavigator()\r\n\r\nfunction EditScreen({navigation}){\r\n    console.log(route.params)\r\n    date = route.params[0]\r\n    return (\r\n        <View>\r\n            <Text>Edit Screen.</Text>\r\n            <Button onPress={()=>navigation.navigate(\"EditScreen\",{date})} title=\"Confirm\"/>\r\n        </View>\r\n    )\r\n}\r\n\r\nfunction DateScreen({navigation}){\r\n    console.log(route.params)\r\n    date = route.params[0]\r\n    return (\r\n        <View stlye={styles.container}>\r\n            <Text>{`Today is the ${date.getDate()} of ${date.getMonth()}.`}</Text>\r\n            <Button onPress={()=>navigation.navigate(\"EditScreen\",{date})} title=\"Edit Tasks\"/>\r\n        </View>        \r\n    )\r\n}\r\nfunction renderCalendar(){}\r\n\r\nfunction CalendarHome(){\r\n    const Navigation = useNavigation()\r\n    let d = new Date()\r\n    let firstDay = new Date(d.getFullYear(),d.getMonth(),1)\r\n    firstDay = firstDay.getDay()\r\n    let dates=[]\r\n    if (firstDay!==0){\r\n        firstDay = firstDay-6\r\n    }\r\n    for (let row=0; row<6; row++){\r\n        for (let column=0; column<7; column++){\r\n            let temp = []\r\n            temp.push(new Date(d.getFullYear(),d.getMonth,firstDay+column+6*row))\r\n        }\r\n        dates.push[temp]\r\n    }\r\n    return (\r\n        <View style={styles.container}>{dates}</View>\r\n    )\r\n}\r\nexport default function CalendarStack(){\r\n    return (\r\n        <Stack.Navigator>\r\n            <Stack.Screen name=\"CalenderHome\" component={CalendarHome}/>\r\n            <Stack.Screen name=\"DateScreen\" component={DateScreen}/>\r\n            <Stack.Screen name=\"EditScreen\" component={EditScreen}/>\r\n        </Stack.Navigator>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        justifyContent:'center',\r\n        alignItems:'center',\r\n        flex:1,\r\n    },\r\n    row: {\r\n        flex:1,\r\n        padding:10,\r\n    },\r\n    column: {\r\n        flex:1,\r\n        padding:5,\r\n    },\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}